@model Soundche.Web.Models.HangoutViewModel
@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    string currentSong = Model.CurrentSong + "?enablejsapi";

    if (Model.AutoPlay)
    {
        currentSong += "&autoplay=1";
    }
}

<head>
    <!-- Include Ajax -->
    <script src="https://code.jquery.com/jquery-1.9.1.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.0.0/jquery.min.js"></script>
</head>

<div class="embed-responsive embed-responsive-21by9">
    <iframe class="embed-responsive-item" src="@currentSong" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
</div>

<div>
    <label id="name"></label>
</div>

<input type="button" value="Hello" onclick="@("location.href='"+ Url.Action("Play", "Hangout")+ "'")" />
<!--<input type="button" value="Hello" onclick="("location.href='"+ Url.Action("Play", "Hangout", new { playlistNr = Model.SelectedPlaylist })+ "'")" />-->


@Html.DropDownListFor(m => m.SelectedPlaylist, Model.UserPlaylists, "Select Playlist");

<!--<form asp-controller="Hangout" asp-action="Play" method="post">
    <!-- Input and Submit elements -->
<!--</form>-->
<!--
// TODO: Make audioplayer partial view work with my id text replacement in performSongSwitch()
// TODO: Make sure the getActiveSong interval is only enabled if we have first called the Play IActionResult (such that the page has /Play in the querystring).
// TODO: Code it to work with playlists

// NOTE: I might also just setTimeout on the getActiveSong function, a timeout that fits with the amount of time it should play the song.
// NOTE: But that wouldn't work well if we skip something server-side, etc. etc. Better if the server handles it all'
-->

<script type="text/javascript">
    var name = "";
    var startTime = 0;
    var endTime = 0;
    var youtubeUrl = "";
    var lastTimeSwitchedSong = 0;

    setInterval(getActiveSong, 15000); // check if we switched song every x amount of milliseconds

    function getActiveSong() {
        $.ajax({
            url: '@Url.Action("GetActiveSong", "Hangout")',
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: checkIfSwitchSong,
            error: function () { alert('Fuck You'); },
        });
    }

    function checkIfSwitchSong(activeSong) {
        // is it a different song since last we checked?
        if (activeSong.switchedSongTime != lastTimeSwitchedSong) {
            //alert(activeSong.switchedSongTime); TODO REMOVE
            //alert(lastTimeSwitchedSong);
            performSongSwitch(activeSong);
        }
    }

    function performSongSwitch(newSong) {
        alert(newSong);

        name = newSong.name;
        $("#name").text(name);
        startTime = newSong.startTime;
        $("#startTime").text(startTime);
        endTime = newSong.endTime;
        $("#endTime").text(endTime);
        youtubeUrl = newSong.youtubeUrl;
        $("#youtubeUrl").text(youtubeUrl);
        lastTimeSwitchedSong = newSong.switchedSongTime;
    }
</script>

<!--<script type="text/javascript">
    setTimeout("window.location.href = '@Url.Action("RefreshPage", "Hangout")/';", 5000);
</script>-->
<partial name="_AudioPlayer" />
@model Soundche.Web.Models.HangoutViewModel
@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@

<!--
// TODO: Make audioplayer partial view work with my id text replacement in performSongSwitch()
// TODO: Make sure the getActiveSong interval is only enabled if we have first called the Play IActionResult (such that the page has /Play in the querystring).
// NOTE: I might also just setTimeout on the getActiveSong function, a timeout that fits with the amount of time it should play the song.
// NOTE: But that wouldn't work well if we skip something server-side, etc. etc. Better if the server handles it all'
-->
<!--
        <partial name="_AudioPlayer" />

-->

<body>
    <div class="hangout-player-grid-main">
        <div class="embed-responsive embed-responsive-16by9">
            <!--or use class="video-container"-->
            <div id="player"></div>
        </div>
    </div>

    <div class="hangout-btn-grid-main">
        <div class="hangout-pic frame">
            <img src="https://www.meme-arsenal.com/memes/611c8f9484a86b43bfa811ea87a11bc0.jpg" />
        </div>
        <div class="hangout-info">
            <label class="stretch">INFO ABOUT THE CURRENT SONG</label>
        </div>
        <div class="hangout-play">
            <input id="btn-play" type="button" class="btn btn-success stretch" value="Play" />
        </div>
        <div class="hangout-all">
            <input id="btn-all" type="button" class="btn btn-secondary stretch" value="View All" />
        </div>
        <div class="hangout-remove">
            <input id="btn-remove" type="button" class="btn btn-danger stretch" value="Remove" />
        </div>
        <div class="hangout-prev">
            <input id="btn-prev" type="button" class="btn btn-primary stretch" value="Previous Song" />
        </div>
        <div class="hangout-vol">
            <input id="btn-vol" type="button" class="btn btn-primary stretch" value="Volume" />
        </div>
        <div class="hangout-next">
            <input id="btn-next" type="button" class="btn btn-primary stretch" value="Next Song" />
        </div>
        <div class="hangout-playlist">
            <!--Courtesy of the living legend from: https://stackoverflow.com/questions/50191984/how-to-get-dropdownlist-selected-value-in-mvc-->
            @Html.DropDownListFor(m => m.SelectedPlaylist, Model.PlaylistsDropdown, new { @class = "stretch" })
        </div>
        <div class="hangout-sort">
            @Html.DropDownListFor(m => m.SelectedQueueMethod, Model.QueueMethodDropdown, new { @class = "stretch" })
        </div>
        <div class="hangout-apply">
            <input id="btn-apply" type="button" class="btn btn-danger stretch" value="Apply" />
        </div>
        <div class="hangout-create">
            <input id="btn-create" type="button" class="btn btn-secondary stretch" value="Create" />
        </div>
        <div class="hangout-edit">
            <input id="btn-edit" type="button" class="btn btn-secondary stretch" value="Edit" />
        </div>
        <div class="hangout-delete">
            <input id="btn-delete" type="button" class="btn btn-secondary stretch" value="Delete" />
        </div>
    </div>
    
    <div id="partial" class="overlay"></div>
</body>

<script type="text/javascript">
    function disableElements(arguments) {
        var argsArr = arguments.split(' ');
        for (var i = 0; i < argsArr.length; i++) {
            $('#' + argsArr[i]).prop("disabled", true);
        }
    }

    function enableElements(arguments) {
        var argsArr = arguments.split(' ');
        for (var i = 0; i < argsArr.length; i++) {
            $('#' + argsArr[i]).prop("disabled", false);
        }
    }

    var overlayOpen = false;
    function toggleOverlay() {
        if (!overlayOpen) {
            overlayOpen = true;
            disableElements("btn-create btn-edit btn-delete btn-play btn-remove");
        }
        else {
            overlayOpen = false;
            enableElements("btn-create btn-edit btn-delete btn-play btn-remove");
        }
    }

    /////////////////// BUTTON BINDS

    $('#btn-play').on('click', function () {
        soundcheInterface.addPlaylistToQueue(); //TODO GET THE ACTUAL PLAYLIST HERE
    });

    $('#btn-create').on('click', function () {
        toggleOverlay(); // THIS SHOULD ONLY BE TRIGGERED ON SUCCESS TODO
        $('#partial').load('@Url.Action("AddPlaylist", "Hangout")'); // I SHOULD TRY TO MOVE THIS TO SOUNDCHEINTERFACE
    });

    $('#btn-edit').on('click', function () {
        toggleOverlay(); // THIS SHOULD ONLY BE TRIGGERED ON SUCCESS TODO
        $('#partial').load('@Url.Action("EditPlaylist", "Hangout", new { selected = "Penis" })');
        // TODO MAKE SELECTED PLAYLIST A JS VAR. Just make the entire dropdown in pure js, or at least ensure I can get the contents
        // CLEAN UP. Add the selected name in here properly

        //$('#partial').addClass("overlay");
    });

    $('#btn-vol').on('click', function () {
        // TODO Maybe I can just replace the button with a volume slider? And then have something that calls functions on the active yt player?
    });

    $('#btn-apply').on('click', function () {
    });

    $('#btn-delete').on('click', function () {
    });

    ////////////////////////////////
    var youtubeInterface = {
        onPlayerReady(event) {
            event.target.playVideo();
        },

        //MBY HAVE A STATE CHANGE TO MAKE SURE PEOPLE ARE ON THE SAME STATE?
        onPlayerStateChange(event) {

        },

        playVideo() {
            player.playVideo();
        },

        stopVideo() {
            player.stopVideo();
        },

        pausePlay() {
            if (player.getPlayerState() == 1) {
                player.pauseVideo();
            }
            else {
                player.playVideo();
            }
        },

        muteUnmute() {
            if (player.isMuted() == 1) {
                player.unMute();
            }
            else {
                player.mute();
            }
        },

        setVolume(volume) {
            player.setVolume(volume)
        },

        getVolume() {
            return player.getVolume();
        },

        getDuration() {
            return player.getDuration()
        },

        getCurrentTime() {
            return player.getCurrentTime()
        },

        loadVideo(videoId, startSeconds) {
            player.loadVideoById({
                videoId: videoId,
                startSeconds: startSeconds
            })
        },
    }

    var sessionStore = {
        songName: "",
        startTime: 0,
        endTime: 0,
        youtubeUrl: "",
        lastTimeSwitchedSong: 0,
        resyncInterval: 0,
    }

    var soundcheInterface = {
        getActiveSong() {
            $.ajax({
                url: '@Url.Action("GetActiveSong", "Hangout")',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: soundcheInterface.updateActiveSong,
                error: function () { alert('Fuck You'); },
            });
        },

        updateActiveSong(sessionData) {
        // Check if there is an active song and if its a different song since last time we checked
            if (sessionData.isActive && (sessionData.switchedSongTime != sessionStore.lastTimeSwitchedSong)) {
                sessionStore.songName = sessionData.songName;
                sessionStore.startTime = sessionData.startTime;
                sessionStore.endTime = sessionData.endTime;
                sessionStore.youtubeUrl = sessionData.youtubeUrl;
                sessionStore.lastTimeSwitchedSong = sessionData.switchedSongTime;

                youtubeInterface.playVideo(sessionData.youtubeUrl, sessionData.startTime);
            }
        },

        skipSong() {
            $.ajax({
                url: '@Url.Action("NextSong", "Hangout")',
                success: soundcheInterface.getActiveSong,
                error: function () { alert('Failed to skip song'); },
            });
        },

        addPlaylistToQueue() {
            $.ajax({
                url: '@Url.Action("AddPlaylistToQueue", "Hangout")',
                success: soundcheInterface.updateActiveSong,
                error: function () { alert('Failed to add playlist'); },
            });
        },

        // TODO THE REST
    }

    //SOUNCHE INITIATION
    soundcheInterface.getActiveSong();

    //YOUTUBE API INSTANTIATION START
    var tag = document.createElement('script');

    tag.src = "https://www.youtube.com/iframe_api";
    var firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

    var player;

    function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
            height: '390',
            width: '640',
            videoId: sessionStore.youtubeUrl,
            playerVars: {
                autoplay: 1,
                rel: 0,
                modestbranding: 1,
                disablekb: 1,
                controls: 0,
                fs: 0,
            },
            events: {
                'onReady': youtubeInterface.onPlayerReady,
                'onStateChange': youtubeInterface.onPlayerStateChange
            }
        })
    };
    //YOUTUBE API INSTANTIATION END
</script>

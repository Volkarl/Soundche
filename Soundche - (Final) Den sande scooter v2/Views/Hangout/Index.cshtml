@model Soundche.Web.Models.HangoutViewModel
@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@

<style> /*GET INTO RIGHT STYLING SHEET*/
    .video-wrapper {
        position: relative;
        padding-bottom: 56.25%; /* 16:9 */
        padding-top: 25px;
    }

        .video-wrapper iframe {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }
</style>

<head>
    <!-- Include Ajax -->
    <script src="https://code.jquery.com/jquery-1.9.1.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.0.0/jquery.min.js"></script>
</head>

<body>
    <div class="video-wrapper">
        <div id="player"></div>
    </div>

    <!--<input type="button" value="@Model.SelectedPlaylist" onclick="@("location.href='"+ Url.Action("Play", "Hangout", new { playlistNr = Model.SelectedPlaylist })+ "'")" />-->
    <!--
    // TODO: Make audioplayer partial view work with my id text replacement in performSongSwitch()
    // TODO: Make sure the getActiveSong interval is only enabled if we have first called the Play IActionResult (such that the page has /Play in the querystring).

    // NOTE: I might also just setTimeout on the getActiveSong function, a timeout that fits with the amount of time it should play the song.
    // NOTE: But that wouldn't work well if we skip something server-side, etc. etc. Better if the server handles it all'
    -->


    @using (Html.BeginForm("Play", "Hangout"))
    {
        //Courtesy of the living legend from: https://stackoverflow.com/questions/50191984/how-to-get-dropdownlist-selected-value-in-mvc
        @Html.DropDownListFor(m => m.SelectedPlaylist, Model.UserPlaylists, "Select");
        <button type="submit" class="btn btn-danger">Submit</button>
    }

    <partial name="_AudioPlayer" />

    <div>
        <button id="openplaylistedit">Edit Selected Playlist</button>
    </div>

    <div id="partial"></div>
</body>


<script type="text/javascript">
    //var playlists = Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.SelectedPlaylist .Playlists)); // Serialized playlists

    $('#openplaylistedit').on('click', function () {
        $('#partial').load('@Url.Action("EditPlaylist", "Hangout", new { selected = "Penis" })'); // TODO MAKE SELECTED PLAYLIST A JS VAR. Just make the entire dropdown in pure js, or at least ensure I can get the contents
    }); // CLEAN UP. Add the selected name in here properly



    ////////////////////////////////
    var youtubeInterface = {
        onPlayerReady(event) {
            event.target.playVideo();
        },

        //MBY HAVE A STATE CHANGE TO MAKE SURE PEOPLE ARE ON THE SAME STATE?
        onPlayerStateChange(event) {

        },

        playVideo() {
            player.playVideo();
        },

        stopVideo() {
            player.stopVideo();
        },

        pausePlay() {
            if (player.getPlayerState() == 1) {
                player.pauseVideo();
            }
            else {
                player.playVideo();
            }
        },

        muteUnmute() {
            if (player.isMuted() == 1) {
                player.unMute();
            }
            else {
                player.mute();
            }
        },

        setVolume(volume) {
            player.setVolume(volume)
        },

        getVolume() {
            return player.getVolume();
        },

        getDuration() {
            return player.getDuration()
        },

        getCurrentTime() {
            return player.getCurrentTime()
        },

        loadVideo(videoId, startSeconds) {
            player.loadVideoById({
                videoId: videoId,
                startSeconds: startSeconds
            })
        },


    }

    var sessionStore = {
        songName: "",
        startTime: 0,
        endTime: 0,
        youtubeUrl: "",
        lastTimeSwitchedSong: 0,
        resyncInterval: 0,
    }

    var soundcheInterface = {
        getActiveSong() {
            $.ajax({
                url: '@Url.Action("GetActiveSong", "Hangout")',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: soundcheInterface.updateActiveSong,
                error: function () { alert('Fuck You'); },
            });
        },

        updateActiveSong(sessionData) {
            // Check if there is an active song and if its a different song since last time we checked
            if (sessionData.isActive && (sessionData.switchedSongTime != sessionStore.lastTimeSwitchedSong)) {
                sessionStore.songName = sessionData.songName;
                sessionStore.startTime = sessionData.startTime;
                sessionStore.endTime = sessionData.endTime;
                sessionStore.youtubeUrl = sessionData.youtubeUrl;
                sessionStore.lastTimeSwitchedSong = sessionData.switchedSongTime;

                youtubeInterface.playVideo(sessionData.youtubeUrl, sessionData.startTime);
            }
        },

        skipSong() {
            $.ajax({
                url: '@Url.Action("NextSong", "Hangout")',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: soundcheInterface.getActiveSong,
                error: function () { alert('Fuck You'); },
            });
        },
    }

    //SOUNCHE INITIATION
    soundcheInterface.getActiveSong();

    //YOUTUBE API INSTANTIATION START
    var tag = document.createElement('script');

    tag.src = "https://www.youtube.com/iframe_api";
    var firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

    var player;

    function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
            height: '390',
            width: '640',
            videoId: sessionStore.youtubeUrl,
            playerVars: {
                autoplay: 1,
                rel: 0,
                modestbranding: 1,
                disablekb: 1,
                controls: 0,
                fs: 0,
            },
            events: {
                'onReady': youtubeInterface.onPlayerReady,
                'onStateChange': youtubeInterface.onPlayerStateChange
            }
        })
    };
    //YOUTUBE API INSTANTIATION END
</script>

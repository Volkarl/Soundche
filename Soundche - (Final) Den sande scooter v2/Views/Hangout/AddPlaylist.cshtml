@model Soundche.Core.Domain.Playlist
@{
    ViewBag.Title = "AddPlaylist";
}

<head>
    <!-- Include Ajax -->
    <script src="https://code.jquery.com/jquery-1.9.1.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.0.0/jquery.min.js"></script>
</head>

<div>
    <h2>
        Add New Playlist
    </h2>
</div>

<div>
    <!-- This div is essential. Otherwise it doesn't work lmao-->
    @using (@Html.BeginForm())
    {
        @Html.ValidationSummary();
        @Html.TextBoxFor(model => Model.Name, new { @class = "form-control", placeholder = " Playlist name" });
        <button class="btn btn-success" type="submit">Create Playlist</button>

        @using (Html.BeginForm())
        {
            <div id="editorRowsTracks">
                @foreach (var item in Model.Tracks)
                    @Html.Partial("Track", item)
            </div>
            <button id="addNewTrackBtn" type="button">Add New Row</button>
        }
    }

    <!--
    READ THE SECOND ONE TO BE SURE https://blog.stevensanderson.com/2010/01/28/validating-a-variable-length-list-aspnet-mvc-2-style/
      -->
</div>

<!-- TODO Need switch index functionality for each track element -->
<!-- TODO ADD THIS, AND THEN MAKE SURE VIDEOS CAN STILL BE PLAYED-->
<!-- All made courtesy to this genius https://stackoverflow.com/questions/29700557/mvc-5-dynamic-rows-with-begincollectionitem -->

<script type="text/javascript">
        $(function () {
            $('#addNewTrackBtn').on('click', function () {
                $.ajax({
                    url: '@Url.Action("Track")',
                        cache: false,
                        success: function (html) { $("#editorRowsTracks").append(html); }
                    });
                    return false;
            });
            $('#editorRowsTracks').on('click', '.deleteRow', function () {
                $(this).closest('.editorRow').remove();
            });
        });

    function getYoutubeIdFromUrl(url) {
        let re = /^(https?:\/\/)?((www\.)?(youtube(-nocookie)?|youtube.googleapis)\.com.*(v\/|v=|vi=|vi\/|e\/|embed\/|user\/.*\/u\/\d+\/)|youtu\.be\/)([_0-9a-z-]+)/i;
        return url.match(re)[7];
        // Source: https://stackoverflow.com/a/51870158/5774018
        // Regex to get the youtube id from most kinds of youtube links
    }

    function createItemFromTemplate(templateId, indexNo, insertBeforeId) {
        // Copy the template Element, replaces all the _x0x_ with the index no and add the new element
        $('#' + insertBeforeId).before($.parseHTML($('#' + templateId).clone().prop('outerHTML').replace(/_x0x_/g, indexNo)));
    }
</script>

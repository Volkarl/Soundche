@model Soundche.Web.Models.HangoutViewModel

<body>
    <div class="hangout-header-main">
        <div class="header-logo">
            <img src="/lib/images/soundchedone.gif" alt="Prøv at forestille jer mit anus..." class="max-size-logo" />
        </div>
        <div class="header-title">
            <h2>Soundche</h2>
        </div>
        <div class="header-byline">
            <p>A Bøllebanden Product</p>
            <p>Version 1.1 Sugarfree Elderflower</p>
        </div>
    </div>

    <div id="modal" class="modal">
        <div class="modal-content">
            <span id="modal-close" class="close">&times;</span>
            <p id="modal-text-content">Loading...</p>
        </div>
    </div>

    <div class="hangout-player-main">
        <div class="embed-responsive embed-responsive-16by9">
            <div id="player"></div>
        </div>

        <div class="progress stretch">
            <div id="progress-color-bar" class="progress-color-bar"></div>
            <div id="progress-text" class="progress-percent">0%</div>
            <div id="progress-color-min-mark" class="progress-color-min-mark"></div>
            <div id="progress-color-max-mark" class="progress-color-max-mark"></div>
            <div id="start-time-input" class="start-time-input">
                <input id="start-time-input-text" rows="1" type="number" min="0" step="1" class="time-input-text" value="0"/>
            </div>
            <div id="end-time-input" class="end-time-input">
                <input id="end-time-input-text" rows="1" type="number" min="0" step="1" class="time-input-text" value="0"/>
                <!-- TODO only show if it's my own song-->
            </div>
        </div>
    </div>

    <div class="hangout-status-grid">
        <div class="status-lineleft black-background"></div>
        <div id="current-dj-div" class="status-status">
            <label id="current-dj" class="min-size">No song is being played :(</label>
        </div>
        <div class="status-lineright black-background"></div>
        <div class="status-user">
            <label id="connected-users" class="min-size">Updating active users...</label>
        </div>
        <div class="status-empty"></div>
        <div class="status-playlists">
            <label id="current-playlists" class="min-size">No playlists currently playing</label>
        </div>
    </div>

    <div class="hangout-btn-grid-main">
        <div class="hangout-pic frame">
            <img id="song-img" src="~/lib/images/ricardo.jpg" alt="" class="maxwidth-maxheight" />
        </div>
        <div class="hangout-info">
            <label id="song-info" class="stretch"></label>
        </div>
        <div class="hangout-play">
            <input id="btn-play" type="button" class="btn btn-success stretch" value="Play" />
        </div>
        <div class="hangout-all">
            <input id="btn-all" type="button" class="btn btn-secondary stretch" value="View All" />
        </div>
        <div class="hangout-remove">
            <!-- TODO -->
            <input id="btn-remove" type="button" class="btn btn-danger stretch" value="Remove" />
        </div>
        <div class="hangout-prev">
            <input id="btn-prev" type="button" class="btn btn-primary stretch" value="Previous Song" />
        </div>
        <div class="hangout-vol">
            <input id="vol-control" type="range" min="0" max="100" value="50" step="1" class="stretch" />
        </div>
        <div class="hangout-next">
            <input id="btn-next" type="button" class="btn btn-primary stretch" value="Next Song" />
        </div>
        <div class="hangout-playlist">
            <!--Courtesy of the living legend from: https://stackoverflow.com/questions/50191984/how-to-get-dropdownlist-selected-value-in-mvc-->
            @Html.DropDownListFor(m => m.SelectedPlaylist, Model.PlaylistsDropdown, new { @class = "stretch", id = "playlistDropdown" })
        </div>
        <div class="hangout-sort">
            @Html.DropDownListFor(m => m.SelectedQueueMethod, Model.QueueMethodDropdown, new { @class = "stretch", id = "sortingMethodDropdown" })
        </div>
        <div class="hangout-apply">
            <input id="btn-apply" type="button" class="btn btn-danger stretch" value="Apply" />
        </div>
        <div class="hangout-create">
            <input id="btn-create" type="button" class="btn btn-secondary stretch" value="Create" />
        </div>
        <div class="hangout-edit">
            <input id="btn-edit" type="button" class="btn btn-secondary stretch" value="Edit" />
        </div>
        <div class="hangout-delete">
            <input id="btn-delete" type="button" class="btn btn-secondary stretch" value="Delete" />
        </div>
        <div class="hangout-cmds">
            <textarea id="text-cmds" class="cmds-textarea stretch" readonly="readonly"></textarea>
        </div>
    </div>
    <div id="partial" class="overlay display-hide"></div>
</body>

<script type="text/javascript">
    function logToUi(text) {
        var textarea = $('#text-cmds');
        textarea.val(textarea.val() + text + '\n');
        textarea.scrollTop = textarea.scrollHeight; // Always scroll down when new text appears
    }

    function disableElements(arguments) {
        var argsArr = arguments.split(' ');
        for (var i = 0; i < argsArr.length; i++) {
            $('#' + argsArr[i]).prop("disabled", true);
        }
    }

    function enableElements(arguments) {
        var argsArr = arguments.split(' ');
        for (var i = 0; i < argsArr.length; i++) {
            $('#' + argsArr[i]).prop("disabled", false);
        }
    }

    var overlayOpen = false;
    function toggleOverlay() {
        if (!overlayOpen) {
            $('#partial').removeClass("display-hide");
            overlayOpen = true;
            disableElements("btn-create btn-edit btn-delete btn-play btn-remove");
        }
        else {
            $('#partial').addClass("display-hide");
            overlayOpen = false;
            enableElements("btn-create btn-edit btn-delete btn-play btn-remove");
        }
    }

    function performActionAndToggleOverlay(actionToLoad) {
        $('#partial').load(actionToLoad, function () {
            toggleOverlay();
        });
    }

    function closeOverlay() {
        performActionAndToggleOverlay('@Url.Action("CloseAddPlaylist", "Hangout")');
    }

    function getDropdownSelectedItemText(playlistId) {
        return $(playlistId + " option:selected").text().replace(/\s/g, '+'); // Replace with space for use in urls
    }

    function updateCurrentProgress() {
        if (!sessionStore.isActive || !videoReady ) return;
        var progress = Math.round((youtubeInterface.getCurrentTime() / youtubeInterface.getDuration()) * 100);
        if (isNaN(progress)) return;

        console.log(progress);
        $("#progress-text").text(progress);
        $("#progress-color-bar").width(progress + "%");
    }

    function openModal() {
        console.log("open");
        $('#modal').css('display', 'block');
    }

    function closeModal() {
        console.log("close");
        $('#modal').css('display', 'none');
    }

    /////////////////// BUTTON BINDS

    $('#modal-close').on('click', function () {
        closeModal();
    });
    // TODO Clicking outsie of the modal should also close it, and same goes for my create playlist overlay window

    $('#btn-play').on('click', function () {
        soundcheInterface.addPlaylistToQueue(getDropdownSelectedItemText("#playlistDropdown"));
        logToUi("Play was clicked.");
    });

    $('#btn-all').on('click', function () {
        openModal();
        soundcheInterface.viewPlaylistProgress(function (obj) { console.log(obj.val); $('#modal-text-content').text(obj.val); });
    });

    $('#btn-remove').on('click', function () {
        soundcheInterface.removePlaylistFromQueue(getDropdownSelectedItemText("#playlistDropdown"));
    });

    $('#btn-next').on('click', function () { // TODO Grey out next and prev if nothing is playing
        soundcheInterface.setNextSong();
        logToUi("Skip song was clicked.");
    });

    $('#btn-prev').on('click', function () { // TODO Grey out next and prev if nothing is playing
        soundcheInterface.setPreviousSong();
        logToUi("Previous song was clicked.");
    });

    $('#btn-create').on('click', function () {
        performActionAndToggleOverlay('@Url.Action("AddPlaylist", "Hangout")');
    });
    // TODO Need to trigger toggleOverlay whenever I close the playlist editor after having used create/edit as well
    // TODO And also need to update the values within my dropdown lists to include the new one (and same for deletion)

    $('#btn-edit').on('click', function () {
        performActionAndToggleOverlay('/Hangout/EditPlaylist?selected=' + getDropdownSelectedItemText("#playlistDropdown"));
        // Corresponds with the following code, except now it is able to get dynamic values from JS
        // $('#partial').load('@@Url.Action("EditPlaylist", "Hangout", new { selected = "selectedPlaylistString" })');
    });

    $('#vol-control').on('input', function () {
        // This one is for updating while dragging the volume slider
        youtubeInterface.setVolume(this.value);
    });0

    $('#vol-control').on('change', function () {0
        // This one catches when you release the slider
        youtubeInterface.setVolume(this.value);
    });

    $('#btn-apply').on('click', function () {
        $.ajax({
            url: '/Hangout/ApplyNewQueueMethod?queueMethod=' + getDropdownSelectedItemText("#sortingMethodDropdown"),
            success: function ()
            {
                console.log("Changed queueMethod successfully to " + getDropdownSelectedItemText("#sortingMethodDropdown"));
                soundcheInterface.setNextSong();
            },
            error: function () { alert("Could not change queue method") }
        });
        logToUi("Apply " + getDropdownSelectedItemText("#sortingMethodDropdown") + ".");
    });

    // TODO I should probably move the delete button into the AddPlaylist overlay somehow, to ensure you dont do it by mistake
    // Or add a confirmation modal box
    $('#btn-delete').on('click', function () {
        $.ajax({
            url: '/Hangout/DeletePlaylist?playlistName=' + getDropdownSelectedItemText("#playlistDropdown"),
            success: function () { console.log("Deleted playlist " + getDropdownSelectedItemText("#playlistDropdown")) },
            // Todo on success I should add something that removes the playlist from the dropdown menu. Or maybe I just trigger a page reload
            // Like this? Html.Action(Hangout, Index) ???
            error: function () { alert("Could not delete playlist") }
        });
    });

    $('#start-time-input-text').on('blur', function () {
        var newStart = parseInt($('#start-time-input-text').val());
        if (sessionStore.currentDjIsMe && sessionStore.startTime != newStart) soundcheInterface.editActiveTrack(true, newStart);
    });

    $('#end-time-input-text').on('blur', function () {
        var newEnd = parseInt($('#end-time-input-text').val());
        if (sessionStore.currentDjIsMe && sessionStore.endTime != newEnd) soundcheInterface.editActiveTrack(false, newEnd);
    });

    ////////////////////////////////
    var defaultVolume = 50;
    var updateActiveSongIntervalMs = 1000;
    var progressBarUpdateIntervalMs = 1000;
    var allowedOutOfSyncSeconds = 5;
    var startProgress = 0; // How many percent offset the progress bar should have for the current song
    var videoReady = false;

    var youtubeInterface = {

        onPlayerReady(event) {
            // Set volume to default value
            youtubeInterface.setVolume(defaultVolume);
            // Get active song and start playing immediately if there is anything
            soundcheInterface.getActiveSong();
            // Check if there's a new song periodically
            setInterval(soundcheInterface.getActiveSong, updateActiveSongIntervalMs);
            // Update our own progress tracker periodically
            setInterval(updateCurrentProgress, progressBarUpdateIntervalMs);
        },

        onPlayerStateChange(event) {
            console.log(event);
            console.log(event.data);
            var playerStatus = event.data;
            if (!videoReady && (playerStatus == 1 || playerStatus == 2 || playerStatus == 5)) { // if player is playing, paused or queued and not already set to "running"
                console.log("Video ready");
                videoReady = true;

                // Set progress bar attributes once per song
                var trueSongDur = youtubeInterface.getDuration(); // TODO Lav en ordentlig debug playliste til det
                startProgress = Math.round((sessionStore.startTime / trueSongDur) * 100);
                var endProgress = Math.round((sessionStore.endTime / trueSongDur) * 100);
                console.log(trueSongDur, startProgress, endProgress, `${endProgress}%`); // TODO DEBUG, også sæt max 100% ?
                $("#progress-color-min-mark").width(`${startProgress}%`);
                $("#progress-color-max-mark").width(`${100 - endProgress}%`);
                $("#progress-color-max-mark").css('margin-left', `${endProgress}%`);
                updateCurrentProgress();
            }
            else if (videoReady && (playerStatus == -1 || playerStatus == 0)) { // video state unstarted or ended
                videoReady = false;
                console.log("Video unready");
            }
        },

        playVideo() {
            player.playVideo();
        },

        stopVideo() {
            player.stopVideo();
        },

        togglePausePlay() {
            if (player.getPlayerState() == 1) {
                player.pauseVideo();
            }
            else {
                player.playVideo();
            }
        },

        toggleMuteUnmute() {
            if (player.isMuted() == 1) player.unMute();
            else player.mute();
        },

        setVolume(volume) {
            console.log("set volume to " + volume);

            player.unMute();
            player.setVolume(volume);
        },

        getVolume() {
            return player.getVolume();
        },

        getDuration() {
            return player.getDuration()
        },

        getCurrentTime() {
            return player.getCurrentTime()
        },

        loadVideo(videoId, startSeconds) {
            player.loadVideoById({ videoId: videoId, startSeconds: startSeconds })
        },

        loadVideoInfo(videoId, successfunc, errorfunc) {
            $.ajax({
                url: `https://www.googleapis.com/youtube/v3/videos?id=${videoId}&part=contentDetails&key=AIzaSyBU-HwQlSuYkw5OeRlvISVTpNdzn0cZvlM`,
                success: successfunc,
                error: errorfunc
            });
        }
    }

    var sessionStore = {
        isActive: false,
        songName: "",
        author: "",
        startTime: 0,
        elapsedTime: 0,
        endTime: 0,
        youtubeId: "",
        currentDj: "",
        currentDjIsMe: false,
        switchedSongTimeTicks: 0,
        thumbnailUrl: "",
        activeUsers: [],
        activePlaylistNames: []
    }

    var soundcheInterface = {
        getActiveSong() {
            $.ajax({
                url: '@Url.Action("GetActiveSong", "Hangout")',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: soundcheInterface.updateActiveSong,
                error: function () { alert('Fuck You'); },
            });
        },

        updateActiveSong(sessionData) {
            // TODO Should be renamed to something like updateUIStatus and split up a bit
            // Some of its elements shouldnt be tied to the switching of a song
            sessionStore.isActive = sessionData.isActive;

            if (sessionStore.isActive) { // is there an active song?
                sessionStore.elapsedTime = sessionData.elapsedTime;

                if (sessionStore.switchedSongTimeTicks != sessionData.switchedSongTimeTicks) { // is it a new song?
                    console.log(sessionStore.switchedSongTimeTicks, sessionData.switchedSongTimeTicks);

                    sessionStore.songName = sessionData.songName;
                    sessionStore.author = sessionData.author;
                    sessionStore.startTime = sessionData.startTime;
                    sessionStore.endTime = sessionData.endTime;
                    sessionStore.youtubeId = sessionData.youtubeId;
                    sessionStore.switchedSongTimeTicks = sessionData.switchedSongTimeTicks; // Is a string because JS cannot handle 64bit long values
                    sessionStore.thumbnailUrl = `https://img.youtube.com/vi/${sessionData.youtubeId}/mqdefault.jpg`;
                    sessionStore.currentDj = sessionData.currentDj;
                    sessionStore.currentDjIsMe = sessionData.currentDjIsMe;
                    sessionStore.activeUsers = sessionData.activeUsers;
                    sessionStore.activePlaylistNames = sessionData.activePlaylistNames;

                    console.log(sessionStore);
                    youtubeInterface.loadVideo(sessionStore.youtubeId, sessionStore.startTime);
                    // setSongStyles(sessionData.djInfo);
                    $("#song-img").attr("src", sessionStore.thumbnailUrl);
                    $("#song-info").html(`${sessionData.author} - ${sessionData.songName}`);
                    $("#current-dj").html(`${sessionData.currentDj} is playing`);
                    $("#connected-users").html(`${sessionData.activeUsers.length} users`);
                    $("#connected-users").attr("title", sessionData.activeUsers); // Adds tooltip
                    $("#current-playlists").html(`${sessionData.activePlaylistNames.length} playlists`);
                    $("#current-playlists").attr("title", sessionData.activePlaylistNames); // Adds tooltip

                    if (sessionStore.currentDjIsMe) {
                        $("#current-dj-div").css("border", "solid 1px red");
                        $("#start-time-input-text").prop("disabled", false);
                        $("#start-time-input-text").removeClass("hidden");
                        $("#start-time-input-text").val(sessionStore.startTime);
                        $("#end-time-input-text").prop("disabled", false);
                        $("#end-time-input-text").removeClass("hidden");
                        $("#end-time-input-text").val(sessionStore.endTime);
                    }
                    else {
                        $("#current-dj-div").css("border", "0px");
                        $("#start-time-input-text").prop("disabled", true);
                        $("#end-time-input-text").prop("disabled", true);
                        $("#start-time-input-text").addClass("hidden");
                        $("#end-time-input-text").addClass("hidden");
                    }
                }
                else soundcheInterface.synchronizePlaytime();
            }
        },

        synchronizePlaytime() {
            if (sessionStore.isActive) {
                if (Math.abs((sessionStore.startTime + sessionStore.elapsedTime) - youtubeInterface.getCurrentTime()) > allowedOutOfSyncSeconds)
                    youtubeInterface.loadVideo(sessionStore.youtubeId, sessionStore.startTime + sessionStore.elapsedTime);
            }
        },

        setNextSong() {
            $.ajax({
                url: '@Url.Action("NextSong", "Hangout")',
                success: soundcheInterface.getActiveSong,
                error: function () { alert('Failed to get next song'); },
            });
        },

        setPreviousSong() {
            $.ajax({
                url: '@Url.Action("PrevSong", "Hangout")',
                success: soundcheInterface.getActiveSong,
                error: function () { alert('Failed to get previous song'); },
            });
        },

        addPlaylistToQueue(playlistName) {
            $.ajax({
                url: '/Hangout/AddPlaylistToQueue?selectedPlaylistName=' + playlistName,
                success: console.log("Added new playlist " + playlistName), //todo give more immediate feedback :)
                error: function () { alert('Failed to add playlist'); },
            });
        },

        removePlaylistFromQueue(playlistName) {
            $.ajax({
                url: '/Hangout/RemovePlaylistFromQueue?selectedPlaylistName=' + playlistName,
                success: console.log("Removed playlist " + playlistName), //todo give more immediate feedback :)
                error: function () { alert('Failed to remove playlist, has the name changed?'); },
            });
        },

        viewPlaylistProgress(successfunc) {
            $.ajax({
                url: '@Url.Action("ViewPlaylistProgress", "Hangout")',
                success: successfunc,
                error: function () { alert('Failed to view playlists'); },
            });
        },

        resetPlayback() {
            $.ajax({
                url: '@Url.Action("StopPlayingAll", "Hangout")',
                success: youtubeInterface.getActiveSong, //todo måske bare stopplaying i stedet hvis ikke det virker til at stoppe videoen med det samme?
                error: function () { alert('Failed to reset playback'); },
            });
        },

        editActiveTrack(isChangingStartTime, value) {
            var start = sessionStore.startTime;
            var end = sessionStore.endTime;
            if (end > youtubeInterface.getDuration() || start < 0 || start >= end) return;

            if (isChangingStartTime) start = value;
            else end = value;
            console.log(sessionStore.startTime, sessionStore.endTime, sessionStore.switchedSongTimeTicks, start, end);
            $.ajax({
                url: `/Hangout/EditSingleTrack?switchedSongTimeTicks=${ sessionStore.switchedSongTimeTicks }&newStartTime=${ start }&newEndTime=${ end }`,
                success: function () { logToUi(`Changed ${ isChangingStartTime ? "start" : "end" } timer of song`); },
                error: function () { alert(`Failed to change ${ isChangingStartTime ? "start" : "end" } time value`); },
            });
        },
    }

    // YOUTUBE API INSTANTIATION START

    // Load the IFrame Player API code asynchronously.
    var tag = document.createElement('script');
    tag.src = "https://www.youtube.com/player_api";
    var firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

    var player;
    function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
            height: '390',
            width: '640',
            videoId: "",
            playerVars: {
                autoplay: 1,
                modestbranding: 1,
                disablekb: 1,
                controls: 0,
                fs: 0,
            },
            events: {
                'onReady': youtubeInterface.onPlayerReady,
                'onStateChange': youtubeInterface.onPlayerStateChange
            }
        })
    };

    //YOUTUBE API INSTANTIATION END
</script>

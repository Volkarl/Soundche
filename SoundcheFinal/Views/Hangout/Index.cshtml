@model Soundche.Web.Models.HangoutViewModel
@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@

<!--
        <partial name="_AudioPlayer" />

-->

<body>
    <div class="hangout-header-main">
        <div class="header-logo">
            <img src="/lib/images/soundchedone.gif" alt="Prøv at forestille jer mit anus..." class="max-size-logo" />
        </div>
        <div class="header-title">
            <h2>Soundche</h2>
        </div>
        <div class="header-byline">
            <p>A Bøllebanden Product</p>
        </div>
    </div>

    <div class="hangout-player-main">
        <div class="embed-responsive embed-responsive-16by9">
            <div id="player"></div>
        </div>

        <div class="progress stretch">
            <div id="progress-color-bar" class="progress-color-bar"></div>
            <div id="progress-text" class="progress-percent">0%</div>
        </div>
    </div>

    <div class="hangout-btn-grid-main">
        <div class="hangout-empty"></div>
        <div class="hangout-pic frame"> <!-- TODO -->
            <img src="https://www.meme-arsenal.com/memes/611c8f9484a86b43bfa811ea87a11bc0.jpg" class="maxwidth-maxheight" />
        </div>
        <div class="hangout-info">
            <label class="stretch">INFO ABOUT THE CURRENT SONG</label> <!-- TODO -->
        </div>
        <div class="hangout-play">
            <input id="btn-play" type="button" class="btn btn-success stretch" value="Play" />
        </div>
        <div class="hangout-all"> <!-- TODO -->
            <input id="btn-all" type="button" class="btn btn-secondary stretch" value="View All" />
        </div>
        <div class="hangout-remove"> <!-- TODO -->
            <input id="btn-remove" type="button" class="btn btn-danger stretch" value="Remove" />
        </div>
        <div class="hangout-prev">
            <input id="btn-prev" type="button" class="btn btn-primary stretch" value="Previous Song" />
        </div>
        <div class="hangout-vol">
            <input id="vol-control" type="range" min="0" max="100" value="50" step="1" class="stretch"></input>
        </div>
        <div class="hangout-next">
            <input id="btn-next" type="button" class="btn btn-primary stretch" value="Next Song" />
        </div>
        <div class="hangout-playlist">
            <!--Courtesy of the living legend from: https://stackoverflow.com/questions/50191984/how-to-get-dropdownlist-selected-value-in-mvc-->
            @Html.DropDownListFor(m => m.SelectedPlaylist, Model.PlaylistsDropdown, new { @class = "stretch", id = "playlistDropdown" })
        </div>
        <div class="hangout-sort">
            @Html.DropDownListFor(m => m.SelectedQueueMethod, Model.QueueMethodDropdown, new { @class = "stretch", id = "sortingMethodDropdown" })
        </div>
        <div class="hangout-apply">
            <input id="btn-apply" type="button" class="btn btn-danger stretch" value="Apply" />
        </div>
        <div class="hangout-create">
            <input id="btn-create" type="button" class="btn btn-secondary stretch" value="Create" />
        </div>
        <div class="hangout-edit">
            <input id="btn-edit" type="button" class="btn btn-secondary stretch" value="Edit" />
        </div>
        <div class="hangout-delete">
            <input id="btn-delete" type="button" class="btn btn-secondary stretch" value="Delete" />
        </div>
    </div>
    
    <div id="partial" class="overlay display-hide"></div>
</body>

<script type="text/javascript">
    function disableElements(arguments) {
        var argsArr = arguments.split(' ');
        for (var i = 0; i < argsArr.length; i++) {
            $('#' + argsArr[i]).prop("disabled", true);
        }
    }

    function enableElements(arguments) {
        var argsArr = arguments.split(' ');
        for (var i = 0; i < argsArr.length; i++) {
            $('#' + argsArr[i]).prop("disabled", false);
        }
    }

    var overlayOpen = false;
    function toggleOverlay() {
        if (!overlayOpen) {
            $('#partial').removeClass("display-hide");
            overlayOpen = true;
            disableElements("btn-create btn-edit btn-delete btn-play btn-remove");
        }
        else {
            $('#partial').addClass("display-hide");
            overlayOpen = false;
            enableElements("btn-create btn-edit btn-delete btn-play btn-remove");
        }
    }

    function performActionAndToggleOverlay(actionToLoad) {
        $('#partial').load(actionToLoad, function () {
            toggleOverlay();
        });
    }

    function closeOverlay() {
        performActionAndToggleOverlay('@Url.Action("CloseAddPlaylist", "Hangout")');
    }

    function getDropdownSelectedItemText(playlistId) {
        return $(playlistId + " option:selected").text().replace(/\s/g, '+'); // Replace with space for use in urls
    }

    function updateCurrentProgress() {
        if (!sessionStore.isActive) return;
        var currentTime = youtubeInterface.getCurrentTime() - sessionStore.startTime;
        var endTime = sessionStore.endTime - sessionStore.startTime;
        var progress = Math.round((currentTime / endTime) * 100);
        if (isNaN(progress)) return;

        console.log(progress);
        $("#progress-text").text(progress);
        $("#progress-color-bar").width(progress + "%");
    }

    /////////////////// BUTTON BINDS

    $('#btn-play').on('click', function () {
        soundcheInterface.addPlaylistToQueue(getDropdownSelectedItemText("#playlistDropdown"));
    });

    $('#btn-remove').on('click', function () {
        soundcheInterface.removePlaylistFromQueue(getDropdownSelectedItemText("#playlistDropdown"));
    });

    $('#btn-next').on('click', function () { // TODO Grey out next and prev if nothing is playing
        soundcheInterface.setNextSong();
    });

    $('#btn-prev').on('click', function () { // TODO Grey out next and prev if nothing is playing
        soundcheInterface.setPreviousSong();
    });

    $('#btn-create').on('click', function () {
        performActionAndToggleOverlay('@Url.Action("AddPlaylist", "Hangout")');
    });
    // TODO Need to trigger toggleOverlay whenever I close the playlist editor after having used create/edit as well
    // TODO And also need to update the values within my dropdown lists to include the new one (and same for deletion)

    $('#btn-edit').on('click', function () {
        performActionAndToggleOverlay('/Hangout/EditPlaylist?selected=' + getDropdownSelectedItemText("#playlistDropdown"));
        // Corresponds with the following code, except now it is able to get dynamic values from JS
        // $('#partial').load('@@Url.Action("EditPlaylist", "Hangout", new { selected = "selectedPlaylistString" })');
    });

    $('#vol-control').on('input', function () {
        // This one is for updating while dragging the volume slider
        youtubeInterface.setVolume(this.value);
    });

    $('#vol-control').on('change', function () {0
        // This one catches when you release the slider
        youtubeInterface.setVolume(this.value);
    });

    $('#btn-apply').on('click', function () {
        $.ajax({
            url: '/Hangout/ApplyNewQueueMethod?queueMethod=' + getDropdownSelectedItemText("#sortingMethodDropdown"),
            success: function () { console.log("Changed queueMethod successfully to " + getDropdownSelectedItemText("#sortingMethodDropdown")) },
            error: function () { alert("Could not change queue method") }
        });
    });

    // TODO I should probably move the delete button into the AddPlaylist overlay somehow, to ensure you dont do it by mistake
    // Or add a confirmation modal box
    $('#btn-delete').on('click', function () {
        $.ajax({
            url: '/Hangout/DeletePlaylist?playlistName=' + getDropdownSelectedItemText("#playlistDropdown"),
            success: function () { console.log("Deleted playlist " + getDropdownSelectedItemText("#playlistDropdown")) },
            // Todo on success I should add something that removes the playlist from the dropdown menu. Or maybe I just trigger a page reload
            // Like this? Html.Action(Hangout, Index) ???
            error: function () { alert("Could not delete playlist") }
        });
    });

    ////////////////////////////////
    var defaultVolume = 50;
    var updateActiveSongIntervalMs = 1000;
    var progressBarUpdateIntervalMs = 1000;
    var allowedOutOfSyncSeconds = 5;

    var youtubeInterface = {

        onPlayerReady(event) {
            // Set volume to default value
            youtubeInterface.setVolume(defaultVolume);
            // Get active song and start playing immediately if there is anything
            soundcheInterface.getActiveSong();
            // Check if there's a new song periodically
            setInterval(soundcheInterface.getActiveSong, updateActiveSongIntervalMs);
            // Update our own progress tracker periodically
            setInterval(updateCurrentProgress, progressBarUpdateIntervalMs);
        },

        onPlayerStateChange(event) { },

        playVideo() {
            player.playVideo();
        },

        stopVideo() {
            player.stopVideo();
        },

        togglePausePlay() {
            if (player.getPlayerState() == 1) {
                player.pauseVideo();
            }
            else {
                player.playVideo();
            }
        },

        toggleMuteUnmute() {
            if (player.isMuted() == 1) player.unMute();
            else player.mute();
        },

        setVolume(volume) {
            console.log("set volume to " + volume);

            player.unMute();
            player.setVolume(volume);
        },

        getVolume() {
            return player.getVolume();
        },

        getDuration() {
            return player.getDuration()
        },

        getCurrentTime() {
            return player.getCurrentTime()
        },

        loadVideo(videoId, startSeconds) {
            player.loadVideoById({ videoId: videoId, startSeconds: startSeconds })
        },

        loadVideoInfo(videoId, successfunc, errorfunc) {
            $.ajax({
                url: `https://www.googleapis.com/youtube/v3/videos?id=${videoId}&part=contentDetails&key=AIzaSyBU-HwQlSuYkw5OeRlvISVTpNdzn0cZvlM`,
                success: successfunc,
                error: errorfunc
            });
        }
    }

    var sessionStore = {
        isActive: false,
        songName: "",
        author: "",
        startTime: 0,
        elapsedTime: 0,
        endTime: 0,
        youtubeId: "",
        switchedSongTimeTicks: 0
    }

    var soundcheInterface = {
        getActiveSong() {
            $.ajax({
                url: '@Url.Action("GetActiveSong", "Hangout")',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: soundcheInterface.updateActiveSong,
                error: function () { alert('Fuck You'); },
            });
        },

        updateActiveSong(sessionData) {
            sessionStore.isActive = sessionData.isActive;

            if (sessionStore.isActive) { // is there an active song?
                sessionStore.elapsedTime = sessionData.elapsedTime;

                if (sessionStore.switchedSongTimeTicks != sessionData.switchedSongTimeTicks) { // is it a new song?
                    sessionStore.songName = sessionData.songName;
                    sessionStore.author = sessionData.author;
                    sessionStore.startTime = sessionData.startTime;
                    sessionStore.endTime = sessionData.endTime;
                    sessionStore.youtubeId = sessionData.youtubeId;
                    sessionStore.switchedSongTimeTicks = sessionData.switchedSongTimeTicks;

                    youtubeInterface.loadVideo(sessionStore.youtubeId, sessionStore.elapsedTime);
                }
                else soundcheInterface.synchronizePlaytime();
            }
        },

        synchronizePlaytime() {
            if (sessionStore.isActive) {
                if (Math.abs(sessionStore.elapsedTime - youtubeInterface.getCurrentTime()) > allowedOutOfSyncSeconds)
                    youtubeInterface.loadVideo(sessionStore.youtubeId, sessionStore.elapsedTime);
            }
        },

        setNextSong() {
            $.ajax({
                url: '@Url.Action("NextSong", "Hangout")',
                success: soundcheInterface.getActiveSong,
                error: function () { alert('Failed to get next song'); },
            });
        },

        setPreviousSong() {
            $.ajax({
                url: '@Url.Action("PrevSong", "Hangout")',
                success: soundcheInterface.getActiveSong,
                error: function () { alert('Failed to get previous song'); },
            });
        },

        addPlaylistToQueue(playlistName) {
            $.ajax({
                url: '/Hangout/AddPlaylistToQueue?selectedPlaylistName=' + playlistName,
                success: console.log("Added new playlist " + playlistName), //todo give more immediate feedback :)
                error: function () { alert('Failed to add playlist'); },
            });
        },

        removePlaylistFromQueue(playlistName) {
            $.ajax({
                url: '/Hangout/RemovePlaylistFromQueue?selectedPlaylistName=' + playlistName,
                success: console.log("Removed playlist " + playlistName), //todo give more immediate feedback :)
                error: function () { alert('Failed to remove playlist, has the name changed?'); },
            });
        },

        viewConnectedPlaylists() {
            $.ajax({
                url: '@Url.Action("ViewConnectedPlaylists", "Hangout")',
                success: function (jsondata) { console.log(jsondata); },
                error: function () { alert('Failed to view connected playlists'); },
            });
        },

        resetPlayback() {
            $.ajax({
                url: '@Url.Action("StopPlayingAll", "Hangout")',
                success: youtubeInterface.getActiveSong, //todo måske bare stopplaying i stedet hvis ikke det virker til at stoppe videoen med det samme? 
                error: function () { alert('Failed to reset playback'); },
            });
        },

    }

    // YOUTUBE API INSTANTIATION START

    // Load the IFrame Player API code asynchronously.
    var tag = document.createElement('script');
    tag.src = "https://www.youtube.com/player_api";
    var firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

    var player;
    function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
            height: '390',
            width: '640',
            videoId: "",
            playerVars: {
                autoplay: 1,
                modestbranding: 1,
                disablekb: 1,
                controls: 0,
                fs: 0,
            },
            events: {
                'onReady': youtubeInterface.onPlayerReady,
                'onStateChange': youtubeInterface.onPlayerStateChange
            }
        })
    };

    //YOUTUBE API INSTANTIATION END
</script>

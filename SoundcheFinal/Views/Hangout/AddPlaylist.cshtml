@model Soundche.Core.Domain.Playlist
@{
    ViewBag.Title = "AddPlaylist";
}

<div id="mainForm">
    <!-- This did it. Now it can silently submit/postback without refreshing the page. The problem is that it's not a very modular
        partial view now (because it references the controller and action directly), but oh well, who cares
        Sources: https://forums.asp.net/t/2148353.aspx, https://stackoverflow.com/questions/53229656/how-to-create-ajax-form-in-asp-net-core,
        https://www.c-sharpcorner.com/UploadFile/0c1bb2/post-data-without-whole-postback/,
        https://stackoverflow.com/questions/53319914/asp-net-mvc-post-data-to-controller-without-refreshing-page-->
    <form asp-controller="Hangout" asp-action="AddPlaylist" data-ajax="true" data-ajax-method="POST" data-ajax-mode="replace" 
          data-ajax-update="#mainForm" data-ajax-success="closeOverlay">

        <a href="#" id="btn-close-overlay" class="close-icon top-left"></a>

        <div class="text-center">
            <h2>Add New Playlist</h2>
        </div>

        @Html.ValidationSummary()
        @Html.TextBoxFor(model => Model.Name, new { @class = "form-control", placeholder = " Playlist name" })
        <button id="playlistsubmitter" class="btn btn-success" type="submit">Save Playlist</button>

        @using (Html.BeginForm())
        {
            <div id="editorRowsTracks">
                @foreach (var item in Model.Tracks ?? new List<Soundche.Core.Domain.Track>())
                    @Html.Partial("Track", item)
            </div>
            <button id="addNewTrackBtn" type="button">Add New Row</button>
        }
        <!-- Form in forms all made courtesy to this genius https://stackoverflow.com/questions/29700557/mvc-5-dynamic-rows-with-begincollectionitem -->
    </form>

    <script type="text/javascript">
        // ADD PLAYLIST SCRIPTS START
        $('#btn-close-overlay').on('click', closeOverlay);

        $('#addNewTrackBtn').on('click', function () {
            addNewTrackEditorRow(false);
            return false;
        });

        $('#editorRowsTracks').on('click', '.deleteRow', function () {
            $(this).closest('.editorRow').remove();
        });

        $('#editorRowsTracks').on('click', '.moveUp', function () {
            $(this).closest('.editorRow').insertBefore($(this).closest('.editorRow').prev());
        });

        $('#editorRowsTracks').on('click', '.moveDown', function () {
            $(this).closest('.editorRow').insertAfter($(this).closest('.editorRow').next());
        });

        $('#editorRowsTracks').on('blur', '#yturl', function (text) {
            var self = $(this);
            //console.log("PAR", self.parent().parent().parent());
            // console.log("PAR ER", self.parentsUntil('#editorRow')); Doesnt work for some reason
            loadUrlIntoEditorRow(self.parent().parent().parent(), self.val())
        });

        function addNewTrackEditorRow(isPerformAction, doToEditorRow) {
            $.ajax({
                url: '@Url.Action("Track")',
                    cache: false,
                    success: function (html) {
                        $("#editorRowsTracks").append(html);
                        if (!isPerformAction) return;
                        er = $("#editorRowsTracks").children().last();
                        doToEditorRow(er);
                    }
            });
        }

        function convertISO8601ToDuration(datestring) {
            datestring = matchNext(/PT/, datestring); // Cut first two chars
            var hrs = matchNext(/H/, datestring["remainder"]);
            var min = matchNext(/M/, hrs["remainder"]);
            var sec = matchNext(/S/, min["remainder"]);
            return (parseInt(hrs["match"]) * 60 * 60) + (parseInt(min["match"]) * 60) + (parseInt(sec["match"]));
        }

        function matchNext(regex, str) {
            var result = str.split(regex);
            if (result.length == 1) return { "match": "0", "remainder": str }
            return { "match": result[0], "remainder": result[1]}
        }

        function loadUrlIntoEditorRow(editorRow, url) {
            ytid = getYoutubeIdFromUrl(url);

            if (ytid != null) {
                youtubeInterface.loadVideoInfo(ytid, function (data) {
                    editorRow.find('#ytendtime').val(convertISO8601ToDuration(data.items[0].contentDetails.duration));
                });

                editorRow.find('#ytid').text(ytid);
                editorRow.find('#ytidvalue').val(ytid); // Need this one to actually ensure my value goes over
                editorRow.find('#successlabel').text("Modified!");

                yttitle = loadYtTitleIntoElements(
                    ytid,
                    editorRow.find('#yttitle'),
                    editorRow.find('#yttitlevalue'),
                    editorRow.find('#ytauthor'),
                    editorRow.find('#ytauthorvalue'),
                    editorRow.find('#spinner'));
            }
            else {
                editorRow.find('#successlabel').text("Invalid. Value not changed!");
            }
        }

        function loadYtTitleIntoElements(id, tar, tarval, author, authorval, spinner) {
            // https://stackoverflow.com/a/39174584/5774018
            // var url = 'https://www.youtube.com/embed/' + id; Embeds don't alter your youtube browsing recommendation, but not all videos are able to be played as embeds
            var url = 'https://www.youtube.com/watch?v=' + id;

            showSpinner(spinner);

            $.getJSON('https://noembed.com/embed',
                { format: 'json', url: url }, function (data) {
                    tar.text(data.title);
                    author.text(data.author_name);
                    tarval.val(data.title);
                    authorval.val(data.author_name);
                    hideSpinner(spinner);
                });
        }

        function showSpinner(spinner) {
            spinner.removeClass("hidden");
            spinner.addClass("loader");
        }

        function hideSpinner(spinner) {
            spinner.removeClass("loader");
            spinner.addClass("hidden");
        }

        function getYoutubeIdFromUrl(url) {
            let re = /^(https?:\/\/)?((www\.)?(youtube(-nocookie)?|youtube.googleapis)\.com.*(v\/|v=|vi=|vi\/|e\/|embed\/|user\/.*\/u\/\d+\/)|youtu\.be\/)([_0-9a-z-]+)/i;
            match = String(url).match(re);
            return (match == null) ? null : match[7];
            // Source: https://stackoverflow.com/a/51870158/5774018
            // Regex to get the youtube id from most kinds of youtube links
        }

        var urlArrayGlobal; // This, along with the "let" instead of a "var" below, fixes closure/scoping issues because functions cannot usually access each others' scopes

        function insertMultipleVideos(urlArray) {
            urlArrayGlobal = urlArray;
            for (let i = 0; i < urlArray.length; i++) {

                addNewTrackEditorRow(true, function (targetElement) {
                    loadUrlIntoEditorRow(targetElement, urlArrayGlobal[i]);
                    console.log(i, " added song ", urlArrayGlobal[i]);
                });

                /*setTimeout(100, function () {
                    addNewTrackEditorRow(true, function (targetElement) {
                        loadUrlIntoEditorRow(targetElement, urlArray[i]);
                    });
                })*/
            }
        }
        // ADD PLAYLIST SCRIPTS END
    </script>
</div>
